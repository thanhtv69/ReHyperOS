#!/sbin/sh

OUTFD=/proc/self/fd/$2
ZIPFILE="$3"

ui_print() {
  echo -e "ui_print $1\nui_print" >>$OUTFD
}

package_extract_file() {
  ui_print "- 正在刷写分区 $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 >$2
}

package_extract_zstd() {
  ui_print "- 正在刷写分区 $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 | /tmp/META-INF/zstd -c -d >$2
}

getVolumeKey() {
	ui_print "- 监听音量键 按[+]选择"是" 按[-]选择"否""
	keyInfo=true
	while $keyInfo;do
		keyInfo=$(getevent -qlc 1 |grep KEY_VOLUME)
		if [ "$keyInfo" == "" ];then
			continue
		else
			isUpKey=$(echo $keyInfo |grep KEY_VOLUMEUP)
			[ "$isUpKey" != "" ] && return 0 || return 1
			break
		fi
	done
}

checkDevice() {
	myDevice=$(getprop ro.product.name)
	romDevice=deviceCode
	ui_print "========================="
	ui_print " "
	ui_print "       设备代号：$myDevice"
	ui_print " "
	ui_print "       ROM 代号：$romDevice"
	ui_print " "
	ui_print "       底包版本：baseversion"
	ui_print " "
	ui_print "       移植版本：portversion"
	ui_print " "
	ui_print "       安卓版本：andVersion"
	ui_print " "
	ui_print "========================="
	if [ "$myDevice" != "$romDevice" ];then
		ui_print "- 设备代号检验不通过，请再次核实此包是否对应你的机型"
		ui_print "- 如果刷错包导致变砖，你将自己承担其后果，是否继续刷入？"
		if ! getVolumeKey ;then
			ui_print "- 你选择了终止刷入"
			exit 1
		else
			ui_print "- 你选择了继续刷入"
		fi
	fi
}

[ -d /tmp ] && rm -rf /tmp
mkdir -p /tmp
unzip "$ZIPFILE" META-INF/zstd -d /tmp
chmod -R 0755 /tmp
ui_print " "
ui_print "========================="
ui_print "       MIUI 追更计划"
ui_print " Github网址: https://github.com/ljc-fight/miui_port"
ui_print "========================="
ui_print " "

checkDevice

# 检查是否存在打包错误

isDamaged=$(unzip -l $ZIPFILE |grep "patcherror.txt")

if [ "$isDamaged" != "" ];then
	ui_print "该ROM存在打包错误，终止刷入"
	exit 1
fi



#firmware




# unzip preloader
unzip -o $ZIPFILE "images/preloader*.img" -d /tmp >/dev/null 2>&1

# 部分机型 刷 preloader 时 检测部分机型的闪存类型 UFS or EMMC

# UFS
if [ -e /dev/block/sda ] && [ -f tmp/images/preloader_ufs.img ] ;then
	unzip -p $ZIPFILE images/preloader_ufs.img | /tmp/META-INF/zstd -c -d >/dev/block/by-name/sda
fi

#EMMC
if [ -e /dev/block/mmcblk0boot0 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/META-INF/zstd -c -d >/dev/block/by-name/mmcblk0boot0
fi

if [ -e /dev/block/mmcblk0boot1 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/META-INF/zstd -c -d >/dev/block/by-name/mmcblk0boot1
fi

# 有 preloader_raw.img 时 获取分区名称
if [ -f tmp/images/preloader_raw.img ] ;then
	for preloaderPartition in $(ls /dev/block/by-name |grep preloader);do
		unzip -p $ZIPFILE images/preloader_raw.img | /tmp/META-INF/zstd -c -d >/dev/block/by-name/"$preloaderPartition"
	done
fi




#super cust image
package_extract_file "images/cust.img" "/dev/block/bootdevice/by-name/cust"
package_extract_zstd "images/super.img.zst" "/dev/block/bootdevice/by-name/super"


#remap
[ -e /dev/block/mapper/odm_a ] && lptools unmap odm_a && lptools map odm_a
[ -e /dev/block/mapper/mi_ext_a ] && lptools unmap mi_ext_a && lptools map mi_ext_a
[ -e /dev/block/mapper/system_a ] && lptools unmap system_a && lptools map system_a
[ -e /dev/block/mapper/vendor_a ] && lptools unmap vendor_a && lptools map vendor_a
[ -e /dev/block/mapper/product_a ] && lptools unmap product_a && lptools map product_a
[ -e /dev/block/mapper/odm_dlkm_a ] && lptools unmap odm_dlkm_a && lptools map odm_dlkm_a
[ -e /dev/block/mapper/system_ext_a ] && lptools unmap system_ext_a && lptools map system_ext_a
[ -e /dev/block/mapper/vendor_dlkm_a ] && lptools unmap vendor_dlkm_a && lptools map vendor_dlkm_a
[ -e /dev/block/mapper/system_dlkm_a ] && lptools unmap system_dlkm_a && lptools map system_dlkm_a


ui_print "- 清除缓存"
rm -rf /data/dalvik-cache/arm/*
rm -rf /data/dalvik-cache/arm64/*
rm -rf /data/system/package_cache/*
ui_print " "
ui_print " "
ui_print "- 刷机完毕"
ui_print " "
ui_print " "
ui_print "- 如有红色挂载报错请直接忽略"
ui_print "- 如有红色挂载报错请直接忽略"
ui_print "- 如有红色挂载报错请直接忽略"
ui_print " "
ui_print " "

exit 0
