name: Build ROM
on:
  workflow_dispatch:
    inputs:
      URL:
        description: "Official ROM URL"
        required: true
        default: "https://bn.d.miui.com/OS1.0.22.0.UMLCNXM/miui_COROT_OS1.0.22.0.UMLCNXM_7b539d7cbd_14.0.zip"
        # default: "https://bn.d.miui.com/V14.0.14.0.TMLCNXM/miui_COROT_V14.0.14.0.TMLCNXM_0c4fddade3_13.0.zip"
      CorePatch:
        description: "Core patch"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "true"
      BuildType:
        description: "Build type"
        required: false
        type: choice
        options:
          - "erofs"
          - "ext4"
        default: "erofs"
      Note:
        description: "Ghi chÃº"
        default: ""

jobs:
  build:
    # runs-on: ubuntu-latest
    runs-on: ubuntu-24.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          # swap-size-mb: 8192
          # root-reserve-mb: 4096
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-docker-images: "true" # Remove unused Docker images
          remove-codeql: "true" # Remove CodeQL components
      - name: Checkout repos
        uses: actions/checkout@main
      - name: Setup
        run: |
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh
          sudo bash setup.sh
      - name: Build
        run: |
          sudo bash build.sh "${{ github.event.inputs.URL }}" "${GITHUB_ENV}" "${{ github.event.inputs.CorePatch }}" "${{ github.event.inputs.BuildType }}"
      - name: Upload ROM
        run: |
          # Fetch the list of servers from the Gofile API
          servers=$(curl -s https://api.gofile.io/servers | jq -r '.data.servers[].name')
          if [[ $? -ne 0 || -z "$servers" ]]; then
              exit 1
          fi

          # Check if there are any servers
          if [[ -z "$servers" ]]; then
              exit 1
          fi

          # Choose a random server from the list
          server_array=($servers)
          random_index=$(( RANDOM % ${#server_array[@]} ))
          best_server=${server_array[$random_index]}

          # Upload the file to the selected server
          upload_response=$(curl -L -N -F "file=@${{ env.rom_path }}" "https://${best_server}.gofile.io/contents/uploadFile")
          if [[ $? -ne 0 ]]; then
              exit 1
          fi

          link_rom=$(echo "$upload_response" | jq -r .data.downloadPage)
          if [[ -z "$link_rom" || "$link_rom" == "null" ]]; then
              exit 1
          fi
          echo "Link Download: $link_rom"

          # Create or update the log file with details of the upload
          log_file="${GITHUB_WORKSPACE}/log.txt"
          touch "$log_file"
          chmod 777 "$log_file"
          {
              echo "- Official ROM: ${{ github.event.inputs.URL }}"
              echo "- ReHyper ROM: $link_rom"
              echo "- BuildType: ${{ github.event.inputs.BuildType }}"
              echo "- MD5: ${{ env.rom_md5 }}"
              echo "- Core patch: ${{ github.event.inputs.CorePatch }}"
              echo "- Build time: $(date +'%Y-%m-%d %H:%M:%S')"
              echo "- Note: ${{ github.event.inputs.Note }}"
          } >> "$log_file"

          # Set the version tag environment variable
          date=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "V_TAG=${{ env.device_name }}-${date}" >> $GITHUB_ENV

      - name: Upload GitHub Release
        uses: ncipollo/release-action@main
        with:
          name: ${{ env.os_version }}
          tag: ${{ env.V_TAG }}
          bodyFile: "${{ github.workspace }}/log.txt"
          allowUpdates: false
          artifactErrorsFailBuild: true
